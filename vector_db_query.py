from qdrant_client import QdrantClient
import numpy as np

import base64
import io
from PIL import Image

from transformers import AutoImageProcessor, ResNetModel
import torch

# Connect to Qdrant
client = QdrantClient(host="localhost", port=6333)

# Collection name
collection_name = "mnist_28x28_image"  # "my_text_collection1"  # "my_collection1"

# Example retrieval of some points to display stored images
from tensorflow import keras

(train_images, train_labels), (test_images, test_labels) = keras.datasets.mnist.load_data()
test_image = test_images[0]
test_label = test_labels[0]

# Load the pre-trained ResNet model and processor, adjusted for RGB input
processor = AutoImageProcessor.from_pretrained(
    "microsoft/resnet-50",
    image_mean=[0.485, 0.456, 0.406],  # Standard mean values for RGB images
    image_std=[0.229, 0.224, 0.225],  # Standard std values for RGB images
)

# Use ResNetModel to access feature embeddings
model = ResNetModel.from_pretrained("microsoft/resnet-50")


# Preprocess images: Normalize to [0, 1] range
def preprocess_images(imgs):
    # Normalize images to the range [0, 1] and ensure single-channel format
    imgs = imgs / 255.0
    if len(imgs.shape) == 3:  # If images are in (N, 28, 28) shape
        imgs = np.expand_dims(imgs, axis=-1)  # Add the channel dimension: (N, 28, 28, 1)
    return imgs


# Apply preprocessing to the test image
test_image = preprocess_images(test_image)


# Ensure the image is reshaped correctly to RGB format (28, 28, 3)
def convert_to_rgb(image):
    if len(image.shape) == 2:  # If the image is 2D, reshape it to 3D (28, 28, 1)
        image = np.expand_dims(image, axis=-1)
    image = np.repeat(image, 3, axis=-1)  # Convert to RGB by repeating channels
    return image


# Convert the test image to RGB
test_image_rgb = convert_to_rgb(test_image)

# Display the test image
print(f"Searching with test image labeled as: {test_label}")
Image.fromarray((test_image * 255).astype(np.uint8)).show()


# Get the embedding of the test image
def get_image_embedding(image):
    inputs = processor(images=image, return_tensors="pt")
    with torch.no_grad():
        outputs = model(**inputs)
    # Extract the pooled output from the model as embeddings
    embeddings = outputs.pooler_output.numpy().flatten()
    return embeddings


# Generate the embedding for the test image
test_embedding = get_image_embedding(test_image_rgb)

# Search for the top 5 most similar images in the Qdrant collection
search_results = client.search(
    collection_name=collection_name,
    query_vector=test_embedding.tolist(),
    limit=5  # Retrieve the top 5 closest images
)

# Display the retrieved images and their metadata
for result in search_results:
    print(f"Retrieved Image ID: {result.id}, Label: {result.payload['label']}, Score: {result.score}")
    retrieved_img_data = base64.b64decode(result.payload['image_base64'])
    retrieved_image = Image.open(io.BytesIO(retrieved_img_data))
    retrieved_image.show()  # This will display the retrieved images

# you can also provide embedding vector itself to search on vector database

# vector = [0, 0, 0, 0, 0, 0, 0, 0.009529923, 0, 0, 0, 0.21827817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0.001097917, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0011441105, 0, 0, 0, 0, 0, 0,
#           0.0007634928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0011088551, 0, 0, 0, 0, 0, 0, 0,
#           0.0003018963, 0.00096019194, 0, 0, 0, 0, 0.03229855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00021008926, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0020196177, 0, 0, 0, 0, 0, 0, 0.40473303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01245071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.23839335,
#           0, 0, 0, 0.0005410487, 0, 0, 0, 0, 0.0009344782, 0, 0.0002110569, 0, 0, 0.0031467457, 0.0007790237, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0052142935, 0.005325781, 0, 0, 0, 0, 0, 0, 0.0046039894, 0, 0, 0, 0, 0, 0, 0,
#           0.000028857643, 0, 0, 0, 0.00072873436, 0.0013483161, 0, 0, 0, 0, 0, 0, 0, 0.036989473, 0, 0, 0, 0, 0, 0,
#           0.000036441397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0049726134,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.46126962, 0, 0, 0, 0, 0, 0.0007210208, 0.007622914, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00045204657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0007307303, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0.0405287, 0, 0, 0.0003725509, 0, 0, 0, 0, 0, 0, 0, 0, 0.00045366155, 0, 0, 0, 0, 0,
#           0.007382655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004346199, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0039858352, 0, 0, 0, 0, 0.45023385, 0, 0, 0, 0,
#           0, 0.002482791, 0, 0, 0.005611808, 0, 0.00046865444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.057708442, 0, 0, 0, 0, 0,
#           0, 0, 0.0049824025, 0, 0, 0, 0, 0, 0, 0, 0, 0.0014259225, 0, 0, 0.0000027643089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0.00040107733, 0, 0, 0, 0.00016858714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00427305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.068950176, 0, 0, 0, 0, 0.001224641, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.016587526, 0, 0.05872813, 0, 0.000021666998, 0, 0.0047417358, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004228809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010464281, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00062232325, 0, 0, 0, 0,
#           0.00011011202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.049798947, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.016417308, 0, 0, 0, 0, 0.006478729, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00013404895, 0, 0, 0.012960321, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.010292194, 0, 0, 0, 0, 0, 0, 0.0011877717, 0, 0, 0, 0, 0.07066074, 0,
#           0, 0, 0, 0, 0, 0, 0.0053776423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.013485979, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0049380367, 0.0017812885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0.16127956, 0, 0, 0.0016758548, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0058982926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.088652246, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0.0002060364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00075673545, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00007968789, 0, 0.01559298, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0.023268336, 0, 0, 0, 0, 0.010507276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0020480198, 0, 0, 0, 0,
#           0.019423025, 0, 0, 0, 0, 0.0076050838, 0, 0, 0, 0, 0.0005244036, 0, 0, 0, 0, 0.00049612956, 0.0003091426, 0,
#           0, 0, 0, 0.00070983905, 0, 0.0066110715, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0.025116997, 0, 0, 0, 0, 0, 0, 0, 0.0038681873, 0, 0, 0, 0, 0, 0, 0, 0.1509741, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0453538, 0, 0, 0, 0, 0, 0, 0.0030163964,
#           0, 0, 0, 0.0039186236, 0, 0, 0, 0.027499907, 0, 0, 0, 0, 0, 0, 0, 0, 0.00043141606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00072865747, 0, 0.0010243095, 0, 0,
#           0.0012714153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02568145, 0.002941359, 0, 0, 0, 0.0005402974, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0.15681334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0026766376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.014880325, 0, 0, 0, 0, 0.0017387694, 0, 0, 0, 0, 0, 0.00040169517, 0, 0, 0, 0,
#           0.0017449893, 0, 0, 0, 0, 0, 0, 0, 0, 0.01539038, 0.0012296707, 0, 0, 0, 0, 0, 0, 0.0005498633, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0004141088, 0.0071931947, 0, 0, 0, 0, 0, 0.029600065, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0015542449, 0, 0, 0, 0, 0.000039397917, 0, 0.008347174, 0.076431446, 0, 0,
#           0.016094143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0027625768, 0, 0, 0, 0, 0.018111654, 0, 0.00037319394, 0,
#           0, 0.00013363519, 0, 0, 0, 0, 0, 0, 0.0005362026, 0, 0, 0, 0, 0, 0, 0.0019557565, 0, 0, 0, 0, 0, 0,
#           0.0026269217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0.00024346508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03336635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0.0014253969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0042473977, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0.00023483924, 0, 0, 0, 0, 0.0003306526, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0111597, 0, 0, 0, 0.0029900994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.10056743, 0, 0.00042242763, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02236156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.012825572, 0, 0, 0, 0, 0,
#           0.051973876, 0.000074598385, 0, 0, 0, 0.0048115896, 0, 0, 0, 0, 0, 0, 0, 0, 0.0024451478, 0, 0, 0.0017880505,
#           0, 0, 0, 0, 0, 0, 0, 0.004787, 0, 0, 0, 0, 0, 0.010023718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00032349187, 0, 0, 0.018973572, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.000014927888, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0.0009447214, 0, 0, 0, 0, 0.41551453, 0, 0, 0, 0, 0, 0, 0, 0.0014070664, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00022787937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0005121078, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00031864026, 0, 0, 0, 0, 0, 0,
#           0.002418747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0.0011517885, 0, 0, 0, 0, 0, 0, 0, 0, 0.0016204175, 0, 0, 0.006381996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.086806476, 0.0022675423, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#           0.004186368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00358438, 0, 0, 0.00006233979, 0, 0, 0, 0, 0, 0.00046943667,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0006831469, 0, 0,
#           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.008394586, 0, 0, 0, 0, 0, 0.00012788636, 0, 0, 0, 0, 0, 0, 0, 0,
#           0.032958455, 0]
# results = client.search(
#     collection_name=collection_name,
#     query_vector=vector,  # Use the embedding of the first inserted point as a query
#     limit=5  # Retrieve top 5 closest images
# )
#
# # Display retrieved images
# for result in results:
#     print(f"Image ID: {result.id}, Label: {result.payload['label']}")
#     img_data = base64.b64decode(result.payload['image_base64'])
#     image = Image.open(io.BytesIO(img_data))
#     image.show()  # This will display the image
